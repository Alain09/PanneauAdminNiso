// Prisma schema corrected for Better Auth and TeamMember relation

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

//////////////////////////
// Auth / User Models
//////////////////////////

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  sessions      Session[]
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?
  role          String
  phone         String?
  position String?
  provence String?

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

//////////////////////////
// Team / Catalogue Models
//////////////////////////

model ProductCatalogue {
  id        String               @id @default(cuid())
  categorie String
  option    Int
  price     Int
  totalweek Int
  composant ComposantCatalogue[]
  @@unique([categorie, option])
}

model ComposantCatalogue {
  id                 String           @id @default(cuid())
  product            String
  quantity           Int
  image              String?
  productCatalogueId String
  productCatalogue   ProductCatalogue @relation(fields: [productCatalogueId], references: [id])
}

//////////////////////////
// Campagne / Tontine Models
//////////////////////////

model Campagne {
  id                   String       @id @default(cuid())
  nom                  String?
  status               Boolean?
  weekActif            Int?
  campagneStatut       String?      @default("En cours")
  dureeSelectionJours  Int?
  dureeTontineSemaines Int?
  selectionStart       DateTime?
  selectionEnd         DateTime?
  tontineStart         DateTime?
  tontineEnd           DateTime?
  createdAt            DateTime     @default(now())
}


////////////////////////////userprofile/////////////////

model UserProfile {
  id                         String   @id @default(cuid())
  firstName                  String
  lastName                   String  
  contact                    String?
  role                       String?
  position                   String?
  image                      String?
  provence                   String?
  profession                 String?
  description                String?
  status                     String?  @default("En cours") // "En cours" | "Terminé"
  montantTotalGlobal         Int?     @default(0)
  googleSheetId              String?  @unique // Nouveau champ optionnel et unique
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

   @@unique([firstName, lastName])

  // Relations
  categoriesStatistiques     CategoriesStatisquesPayement[]

  @@map("user_profiles")
}

model CategoriesStatisquesPayement {
  id                         String   @id @default(cuid())
  category                   String   // "100", "200", "500"
  listOptions                String[] // ["1","2","3"] - array de strings
  status                     String?  @default("En cours") // "En cours" | "Terminé"
  totalPaid                  Int      @default(0)
  weekValided                Int      @default(0)
  totalPaidByWeek            Int      @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  // Relations
  userId                     String
  user                       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  optionsDescription         TontineOption[]
  detailPaiementOfThisCategorie Categories[]

  @@map("categories_statistiques_payement")
}

model TontineOption {
  id                                 String   @id @default(cuid())
  category                           String
  option                             String
  countOption                        Int      @default(1)
  totalToPayByWeekOfThisOption       Int?     @default(0)
  createdAt                          DateTime @default(now())
  updatedAt                          DateTime @updatedAt

  // Relations
  categoriesStatistiquesPayementId   String
  categoriesStatistiquesPayement     CategoriesStatisquesPayement @relation(fields: [categoriesStatistiquesPayementId], references: [id], onDelete: Cascade)
  
  components                         OptionComponent[]

  @@map("tontine_options")
}

model OptionComponent {
  id            String   @id @default(cuid())
  compose       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  tontineOptionId String
  tontineOption   TontineOption @relation(fields: [tontineOptionId], references: [id], onDelete: Cascade)

  @@map("option_components")
}

model Categories {
  id                                   String    @id @default(cuid())
  category                             String
  week                                 Int?   // "sem 1", "sem 2", etc.
  status                               String?   @default("En attente") // "Payé" | "En retard" | "En cours" | "En attente"
  totalToPayByWeekOfThisCategory       Int       @default(0)
  datePaiement                         DateTime?
  createdAt                            DateTime  @default(now())
  updatedAt                            DateTime  @updatedAt

  // Relations
  categoriesStatistiquesPayementId     String
  categoriesStatistiquesPayement       CategoriesStatisquesPayement @relation(fields: [categoriesStatistiquesPayementId], references: [id], onDelete: Cascade)

  @@map("categories")
}